Script started on Tue 31 Jan 2017 01:13:06 PM MST
]0;evan.loughlin@csa3:~/a1evan.loughlin@csa3:~/a1$ gsb[K[Kdb assign1v[Kb
GNU gdb (GDB) Fedora 7.11.1-86.fc24
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "aarch64-redhat-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from assign1b...(no debugging symbols found)...done.
(gdb) b test
Breakpoint 1 at 0x400674
(gdb) info test[K[K[K[Kb
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400674 <test>
(gdb) r
Starting program: /home/ugb/evan.loughlin/a1/assign1b 

Breakpoint 1, 0x0000000000400674 in test ()
(gdb) display/i $pc
1: x/i $pc
=> 0x400674 <test>:	cmp	x19, #0x5
(gdb) ni
0x0000000000400678 in test ()
1: x/i $pc
=> 0x400678 <test+4>:	b.le	0x400610 <top>
(gdb) p $x19
$1 = -8
(gdb) ni
0x0000000000400610 in top ()
1: x/i $pc
=> 0x400610 <top>:	mov	x20, #0x0                   	// #0
(gdb) nip $x19
$2 = -8
(gdb) ni
0x0000000000400614 in top ()
1: x/i $pc
=> 0x400614 <top+4>:	mov	x22, #0x0                   	// #0
(gdb) nip $x19
$3 = -8
(gdb) p $x19[K[K20
$4 = 0
(gdb) p $x2019[4Pni
0x0000000000400618 in top ()
1: x/i $pc
=> 0x400618 <top+8>:	add	x20, x20, x26
(gdb) 
0x000000000040061c in top ()
1: x/i $pc
=> 0x40061c <top+12>:	madd	x20, x25, x19, x20
(gdb) 
0x0000000000400620 in top ()
1: x/i $pc
=> 0x400620 <top+16>:	mul	x22, x24, x19
(gdb) nip $x20
$5 = -73
(gdb) ni
0x0000000000400624 in top ()
1: x/i $pc
=> 0x400624 <top+20>:	madd	x20, x22, x19, x20
(gdb) 
0x0000000000400628 in top ()
1: x/i $pc
=> 0x400628 <top+24>:	mov	x22, #0x0                   	// #0
(gdb) 
0x000000000040062c in top ()
1: x/i $pc
=> 0x40062c <top+28>:	mul	x22, x23, x19
(gdb) nip $x20
$6 = -1609
(gdb) ni
0x0000000000400630 in top ()
1: x/i $pc
=> 0x400630 <top+32>:	mul	x22, x22, x19
(gdb) ni
0x0000000000400634 in top ()
1: x/i $pc
=> 0x400634 <top+36>:	madd	x20, x22, x19, x20
(gdb) 
0x0000000000400638 in top ()
1: x/i $pc
=> 0x400638 <top+40>:	cmp	x28, #0x0
(gdb) 
0x000000000040063c in top ()
1: x/i $pc
=> 0x40063c <top+44>:	b.eq	0x40066c <updateYmax>
(gdb) 
0x000000000040066c in updateYmax ()
1: x/i $pc
=> 0x40066c <updateYmax>:	mov	x21, x20
(gdb) 
0x0000000000400670 in updateYmax ()
1: x/i $pc
=> 0x400670 <updateYmax+4>:	b	0x400648 <loopend>
(gdb) 
0x0000000000400648 in loopend ()
1: x/i $pc
=> 0x400648 <loopend>:	adrp	x0, 0x400000
(gdb) 
0x000000000040064c in loopend ()
1: x/i $pc
=> 0x40064c <loopend+4>:	add	x0, x0, #0x5b0
(gdb) 
0x0000000000400650 in loopend ()
1: x/i $pc
=> 0x400650 <loopend+8>:	mov	x1, x19
(gdb) 
0x0000000000400654 in loopend ()
1: x/i $pc
=> 0x400654 <loopend+12>:	mov	x2, x20
(gdb) 
0x0000000000400658 in loopend ()
1: x/i $pc
=> 0x400658 <loopend+16>:	mov	x3, x21
(gdb) 
0x000000000040065c in loopend ()
1: x/i $pc
=> 0x40065c <loopend+20>:	bl	0x400460 <printf@plt>
(gdb) 
For X =  -8, Y = -73.
     The current maximum of Y = -73.
0x0000000000400660 in loopend ()
1: x/i $pc
=> 0x400660 <loopend+24>:	add	x19, x19, #0x1
(gdb) 
0x0000000000400664 in loopend ()
1: x/i $pc
=> 0x400664 <loopend+28>:	add	x28, x28, #0x1
(gdb) 
0x0000000000400668 in loopend ()
1: x/i $pc
=> 0x400668 <loopend+32>:	b	0x400674 <test>
(gdb) 

Breakpoint 1, 0x0000000000400674 in test ()
1: x/i $pc
=> 0x400674 <test>:	cmp	x19, #0x5
(gdb) 
0x0000000000400678 in test ()
1: x/i $pc
=> 0x400678 <test+4>:	b.le	0x400610 <top>
(gdb) 
0x0000000000400610 in top ()
1: x/i $pc
=> 0x400610 <top>:	mov	x20, #0x0                   	// #0
(gdb) 
0x0000000000400614 in top ()
1: x/i $pc
=> 0x400614 <top+4>:	mov	x22, #0x0                   	// #0
(gdb) q
A debugging session is active.

	Inferior 1 [process 4300] will be killed.

Quit anyway? (y or n) y
]0;evan.loughlin@csa3:~/a1evan.loughlin@csa3:~/a1$ exit
exit

Script done on Tue 31 Jan 2017 01:17:57 PM MST
